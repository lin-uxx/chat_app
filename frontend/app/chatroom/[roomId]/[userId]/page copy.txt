"use client";
import { useParams, useRouter } from "next/navigation";
import { useEffect, useState,useRef } from "react";

export default function UserPage() {
    const [showMenu, setShowMenu] = useState(false); // 👈 控制菜单显示
    const router = useRouter();

    const { roomId, userId } = useParams();
    
    const [users, setUsers] = useState<string[]>([]);

    const [message, setMessage] = useState("");////	使用者正在輸入的內容
    const [messages, setMessages] = useState<{ content: string; sender: "me" | "other" }[]>([]);/////陣列，所有已發送或接收的訊息，初始值是空陣列 []。

    const [checking, setChecking] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const currentUser = sessionStorage.getItem("currentUser");
    const token = sessionStorage.getItem("token");

    const messagesEndRef = useRef<HTMLDivElement>(null);///////////
    const messagesInputRef = useRef<HTMLInputElement>(null);
    



    
    
    useEffect(() => {
        // const token = sessionStorage.getItem("token");

        if (!token) {
            router.push("/login");
            return;
        }

        fetch("http://localhost:8081/users", {
            headers: {
                Authorization: `Bearer ${token}`,
            },
        })
            .then(async (res) => {
                if (!res.ok) {
                    const msg = await res.text();
                    throw new Error(msg || "信息發送失败");
                }
                return res.json();
            })
            .then((data: { users: string[] }) => {
                setUsers(data.users);
                setChecking(false);
            })
            .catch((err) => {
                console.error("获取用户失败：", err);
                setError(err.message || "加载失败");
                setChecking(false);
            });
    }, []);
    

    // if (checking) {
    //     return <div className="h-screen flex justify-center items-center">Loading...</div>;
    // }

    useEffect(() => {
        if (!roomId || !token) return;

        fetch(`http://localhost:8081/messages?room_id=${roomId}`, {
        headers: {
            Authorization: `Bearer ${token}`,
        },
        })
        .then((res) => res.json())
        .then((data) => {
            const msgs =  (data.messages || []).map((m: any) => ({///加空值保護
            content: m.content,
            sender: m.sender === currentUser ? "me" : "other",
            }));
            setMessages(msgs);
        });
    }, [roomId]);

      // ✅ 當訊息變更自動滾動到底部
    useEffect(() => {
        if (messagesEndRef.current) {
        messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
        }
    }, [messages]);



    const handleUserClick = async (targetUser: string) => {
        const currentUser = sessionStorage.getItem("currentUser");
        const token = sessionStorage.getItem("token");
        if (!currentUser || !token) return;

        const res = await fetch("http://localhost:8081/get-or-create-room", {
            method: "POST",
            headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify({
            user1: currentUser,
            user2: targetUser,
            }),
        });

        const data = await res.json();
        console.log("獲得 room_id：", data.room_id);

        router.push(`/chatroom/${data.room_id}/${targetUser}`);
    };



    ////////////////////////////////////////
    const handleSend = async () => {
        const token = sessionStorage.getItem("token");
        // const parsedRoomId = parseInt(roomId as string);




        // 確保 roomId 是有效的 string
        if (typeof roomId !== "string" || isNaN(parseInt(roomId)) || parseInt(roomId) <= 0) {
            alert("房間 ID 無效");
            return;
        }


        const parsedRoomId = parseInt(roomId as string, 10); // ✅ 轉數字
        // if (!message.trim() || !token || !roomId) return;
        if (!message.trim()) return;
        if (!token) {
            alert("請先登入");
            return;
        }
        if (!roomId || isNaN(parsedRoomId) || parsedRoomId <= 0) {
            alert("房間 ID 無效2");
            return;
        }
        try {
            await fetch("http://localhost:8081/messages", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify({
                    room_id: parseInt(roomId as string),
                    content: message,
                    thread_root_id: null,
                }),
            });

            // 把訊息加入本地訊息列表
            setMessages([...messages, { content: message, sender: "me" }]);
            setMessage("");
        } catch (err) {
            alert("訊息發送失敗");
        }
    };
    //////////////////////////////////////

    return (
        <div className="h-screen flex flex-col overflow-hidden">
            {/* 共通ヘッダー */}
            <div style={{ backgroundColor: "#f5fffa" }} className="flex justify-between items-center bg-white p-4 border-b shadow-sm  h-20">
                <h2 className="absolute left-1/2 transform -translate-x-1/2 text-lg text-[#2e8b57] font-semibold">LINECHAT</h2>
                {/* <h2 className="text-lg 	text-[#2e8b57] font-semibold">チャットルーム一覧</h2> */}
                <div></div> {/* 👈 占位用 */}
                {/* 右上角显示头像 */}
                {/* <img src="/window.svg" alt="My Avatar" className="w-8 h-8 rounded-full" /> */}
                {/* 头像和菜单 */}
                <div className="relative">
                    <img
                    src="/window.svg"
                    alt="My Avatar"
                    className="w-8 h-8 rounded-full cursor-pointer"
                    onClick={() => setShowMenu((prev) => !prev)}
                    />

                    {showMenu && (
                    <div className="absolute right-0 mt-2 w-40 bg-white border border-gray-200 rounded shadow-lg z-10">
                        <button
                        onClick={() => router.push("/")}
                        className="block w-full text-left px-4 py-2 hover:bg-gray-100 text-sm"
                        >
                        ホームページ
                        </button>
                        <button
                        onClick={() => {
                            sessionStorage.removeItem("token");//删除token
                            router.push("/login");
                        }}
                        className="block w-full text-left px-4 py-2 hover:bg-gray-100 text-sm text-red-500"
                        >
                        ログアウト
                        </button>
                    </div>
                    )}
                </div>
            </div>
        

            <div className="flex-1 flex">
                {/* 左邊用戶列表 */}
                <div style={{ backgroundColor: "#2e8b57" }} className="w-1/4 p-4 overflow-y-auto">
                    <h2 className="text-xl text-white font-bold mb-4">ユーザー一覧</h2>
                    <ul className="space-y-3">
                        {users
                            .filter((user) => user !== currentUser)// ✅ 過濾掉自己
                            .map((user) => (
                                <li
                                    key={user}
                                    // onClick={() => router.push(`/chatroom/${roomId}/${user}`)}
                                    onClick={() => handleUserClick(user)}
                                    // onClick={() => router.push(`/chatroom/${roomId}/${encodeURIComponent(user)}`)}
                                    //瀏覽器會自動將 /chatroom/ルーム1/さとう 編碼為 /chatroom/%E3%83%AB%E3%83%BC%E3%83%A01/%E3%81%95%E3%81%A8%E3%81%86；
                                    //而 useParams() 拿到的是「原始 URL 字串」，所以需要手動 decode 才能在畫面中還原。
                                    className="p-2 bg-white rounded shadow hover:bg-gray-200 cursor-pointer"
                                >
                                    {user}
                                </li>
                            ))}
                    </ul>
                </div>

                {/* 聊天視窗 */}
                <div className="w-3/4 flex flex-col">
                    {/* 聊天對象名稱 */}
                    <div className="bg-white p-4 border-b">
                        <h2 className="text-lg font-semibold">{decodeURIComponent(userId as string)}</h2>

                        {/* <h2 className="text-lg font-semibold">{userId}</h2> */}
                    </div>


                    {/* 訊息顯示 */}
                    {/* <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50">
                        <div className="flex justify-end">
                            <div className="bg-blue-500 text-white p-2 rounded-lg max-w-xs">こんにちは！</div>
                        </div>
                        <div className="flex justify-start">
                            <div className="bg-green-700 text-white p-2 rounded-lg max-w-xs">やあ！元気？</div>
                        </div>
                    </div> */}
                    {/* 訊息顯示 */}

                    <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50 scrollbar-hide">
                        {messages.map((msg, idx) => (
                            <div key={idx} className={`flex ${msg.sender === "me" ? "justify-end" : "justify-start"}`}>
                                <div className={`p-2 rounded-lg max-w-xs ${msg.sender === "me" ? "bg-blue-500 text-white" : "bg-green-700 text-white"}`}>
                                    {msg.content}
                                </div>
                            </div>
                        ))}
                        {/* 滾動定位點 */}
                        <div ref={messagesEndRef} />
                    </div>


                    {/* 訊息輸入欄位（尚未實作送出） */}
                    <div className="p-4 border-t flex items-center bg-white">
                        <input

                            ref={messagesInputRef} 

                            onKeyUp={(e) => {
                                    if (e.key === "Enter") {handleSend(); // ⏎ 回車登入
                            }}}
                            type="text"
                            placeholder="メッセージを入力..."
                            
                            className="flex-1 border rounded px-3 py-2 mr-2"
                            
                            value={message}
                            onChange={(e) => setMessage(e.target.value)}
                        />
                        <button
                            onClick={handleSend}
                            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                        >
                            送信
                        </button>
                        {/* <input
                            type="text"
                            placeholder="メッセージを入力..."
                            className="flex-1 border rounded px-3 py-2 mr-2"
                            disabled
                        />
                        <button className="bg-gray-300 text-white px-4 py-2 rounded cursor-not-allowed">送信</button> */}
                    </div>
                </div>
            </div>
        </div>
    );
}
